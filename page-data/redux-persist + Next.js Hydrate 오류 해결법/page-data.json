{"componentChunkName":"component---src-templates-post-template-tsx","path":"/redux-persist + Next.js Hydrate 오류 해결법/","result":{"data":{"allMarkdownRemark":{"nodes":[{"html":"<h2 id=\"redux-persist\" style=\"position:relative;\"><a href=\"#redux-persist\" aria-label=\"redux persist permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>redux-persist</h2>\n<p><code class=\"language-text\">redux-persist</code> 는 redux store를 <strong>persist</strong>하고 <strong>rehydrate</strong> 하기 위해서 사용한다.\n기존의 redux store는 새로고침을 하면 저장된 상태가 모두 사라지는데, redux-persist 를 이용해 이를 방지할 수 있다.\n그럼 어떻게 사용하는지 알아보자.</p>\n<h2 id=\"사용-방법\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95\" aria-label=\"사용 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용 방법</h2>\n<p>기존의 redux 코드를 보자</p>\n<p><strong>store.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> configureStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@reduxjs/toolkit'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useSelector<span class=\"token punctuation\">,</span> useDispatch<span class=\"token punctuation\">,</span> useStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> recentPost <span class=\"token keyword\">from</span> <span class=\"token string\">'./board'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">makeStore</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">configureStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    reducer<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      recentPost\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">AppStore</span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> makeStore<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">RootState</span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span>AppStore<span class=\"token punctuation\">[</span><span class=\"token string\">'getState'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">AppDispatch</span> <span class=\"token operator\">=</span> AppStore<span class=\"token punctuation\">[</span><span class=\"token string\">'dispatch'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useAppDispatch <span class=\"token operator\">=</span> useDispatch<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">withTypes</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>AppDispatch<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useAppSelector <span class=\"token operator\">=</span> useSelector<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">withTypes</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>RootState<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useAppStore <span class=\"token operator\">=</span> useStore<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">withTypes</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>AppStore<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>provider.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token string\">'use client'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useRef <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Provider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> makeStore<span class=\"token punctuation\">,</span> AppStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../lib/store'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">StoreProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  children\n<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  children<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ReactNode\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> storeRef <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useRef</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>AppStore<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>storeRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    storeRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token function\">makeStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Provider store<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>storeRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>기존 코드는 <code class=\"language-text\">makeStore</code> 함수를 통해 저장소가 한번만 생성되도록 한다(useRef의 참조값) 서버에서는 한 번만 렌더링되지만 클라이언트에서는 여러번 렌더링 가능하다.\n<a href=\"https://redux.js.org/usage/nextjs#providing-the-store\">redux 공식문서</a></p>\n<p>이처럼 redux 공식문서에는 Next.js 에서 사용하는 방법을 알려주고 있다.\n하지만 공식 사양이 아닌 <code class=\"language-text\">redux-persist</code>는 문서가 없어서 어려움을 겪었는데, 해결 방법을 찾아서 공유하고자 한다.</p>\n<h3 id=\"redux-persist-설치\" style=\"position:relative;\"><a href=\"#redux-persist-%EC%84%A4%EC%B9%98\" aria-label=\"redux persist 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>redux-persist 설치</h3>\n<p>먼저 <code class=\"language-text\">redux-persist</code>를 설치한다</p>\n<blockquote>\n<p>npm install redux-persist</p>\n</blockquote>\n<p>또는</p>\n<blockquote>\n<p>yarn add redux-persist</p>\n</blockquote>\n<h3 id=\"persistconfig-설정\" style=\"position:relative;\"><a href=\"#persistconfig-%EC%84%A4%EC%A0%95\" aria-label=\"persistconfig 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>persistConfig 설정</h3>\n<p>먼저 persistConfig 설정을 통해 config를 설정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> storage <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-persist/lib/storage'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//localstorage 사용 경우</span>\n<span class=\"token keyword\">import</span> sessionStorage <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-persist/lib/storage'</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// session 사용 경우</span>\n\n<span class=\"token keyword\">import</span> recentPost <span class=\"token keyword\">from</span> <span class=\"token string\">'./board'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> persistConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  key<span class=\"token operator\">:</span> <span class=\"token string\">'persist'</span><span class=\"token punctuation\">,</span>\n  storage<span class=\"token punctuation\">,</span> <span class=\"token comment\">// localStorage 사용</span>\n  whitelist<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'recentPost'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// redux-persist를 적용할 slice 선택</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드는 localStorage에 redux를 저장하고, <code class=\"language-text\">recentPost</code> 라는 slice에 redux-persist를 적용한다는 코드다.</p>\n<p><code class=\"language-text\">whitelist</code> 말고 <code class=\"language-text\">blacklist</code> 를 사용하여 slice를 제외하는것도 가능하다.</p>\n<h3 id=\"makestore-함수-수정\" style=\"position:relative;\"><a href=\"#makestore-%ED%95%A8%EC%88%98-%EC%88%98%EC%A0%95\" aria-label=\"makestore 함수 수정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>makeStore 함수 수정</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> rootReducer <span class=\"token operator\">=</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  recentPost<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">makeStore</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> isServer <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> window <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isServer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">configureStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      reducer<span class=\"token operator\">:</span> rootReducer\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> persistedReducer <span class=\"token operator\">=</span> <span class=\"token function\">persistReducer</span><span class=\"token punctuation\">(</span>persistConfig<span class=\"token punctuation\">,</span> rootReducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> store<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token function\">configureStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      reducer<span class=\"token operator\">:</span> persistedReducer<span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">middleware</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>getDefaultMiddleware<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token function\">getDefaultMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          serializableCheck<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            ignoredActions<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">FLUSH</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">REHYDRATE</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PAUSE</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PERSIST</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PURGE</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">REGISTER</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            ignoredPaths<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'__persistor'</span><span class=\"token punctuation\">]</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    store<span class=\"token punctuation\">.</span>__persistor <span class=\"token operator\">=</span> <span class=\"token function\">persistStore</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> store<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>코드를 하나씩 살펴보자</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> rootReducer <span class=\"token operator\">=</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  recentPost<span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">conbineReducers</code> 함수를 이용해 slice를 합친다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  persistReducer<span class=\"token punctuation\">,</span>\n  persistStore<span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">FLUSH</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">REHYDRATE</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">PAUSE</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">PERSIST</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">PURGE</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">REGISTER</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-persist'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> storage <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-persist/lib/storage'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">makeStore</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> isServer <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> window <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isServer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">configureStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      reducer<span class=\"token operator\">:</span> rootReducer\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> persistedReducer <span class=\"token operator\">=</span> <span class=\"token function\">persistReducer</span><span class=\"token punctuation\">(</span>persistConfig<span class=\"token punctuation\">,</span> rootReducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> store<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token function\">configureStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      reducer<span class=\"token operator\">:</span> persistedReducer<span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">middleware</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>getDefaultMiddleware<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token function\">getDefaultMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          serializableCheck<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            ignoredActions<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">FLUSH</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">REHYDRATE</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PAUSE</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PERSIST</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PURGE</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">REGISTER</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            ignoredPaths<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'__persistor'</span><span class=\"token punctuation\">]</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    store<span class=\"token punctuation\">.</span>__persistor <span class=\"token operator\">=</span> <span class=\"token function\">persistStore</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> store<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>먼저 <code class=\"language-text\">isServer</code> 변수로 현재 서버인지, 클라이언트인지 확인한다.\n만약 서버라면 기존 방법대로 store를 생성한다(서버에서는 persist를 할 필요가 없음)</p>\n<p>만약 클라이언트라면 <code class=\"language-text\">persistReducer</code> 를 사용해 persist reducer를 만든다.\n그 후 store를 만드는데 middleware를 사용하 직렬화 하지 않을 Action과 Path를 설정한다.</p>\n<p>redux-persist는 storage에 값을 저장할 때 <strong>직렬화(serialize)</strong> 해서 저장하기 때문에 직렬화 되지 않는 값을 직렬화 하려고 하면 오류가 나기 때문에 제외하는 것이다.</p>\n<p>이를 위해 redux-persist에서 제공하는 Action을 제외하고, 내가 만들 <code class=\"language-text\">__persistor</code> 도 path에서 제외한다.</p>\n<p>그 후 store에 <strong>__persistor</strong> 속성을 추가하여 클라이언트에서 상태 유지 관리를 할 수 있게 한다.</p>\n<h3 id=\"provider-수정\" style=\"position:relative;\"><a href=\"#provider-%EC%88%98%EC%A0%95\" aria-label=\"provider 수정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>provider 수정</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token string\">'use client'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useRef <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Provider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> makeStore<span class=\"token punctuation\">,</span> AppStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../lib/store'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> PersistGate <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-persist/integration/react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">StoreProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  children\n<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  children<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ReactNode\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> storeRef <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useRef</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>AppStore<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>storeRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    storeRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token function\">makeStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>Provider store<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>storeRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>PersistGate loading<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span> persistor<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>storeRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>__persistor<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>PersistGate<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>기존 <code class=\"language-text\">Provider</code> 를 <code class=\"language-text\">PersistGate</code> 로 한번 더 감싸준다.</p>\n<p><code class=\"language-text\">loading</code> 에는 store가 로딩되는 동안 보여줄 화면을 넣으면 된다.</p>\n<p><code class=\"language-text\">persistor</code> 에는 기존에 만들었던 <strong>__persistor</strong> 를 넣어준다.</p>\n<p>실제로 실행하면 잘 되는 모습을 볼 수 있다.</p>\n<h2 id=\"후기\" style=\"position:relative;\"><a href=\"#%ED%9B%84%EA%B8%B0\" aria-label=\"후기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>후기</h2>\n<p>새로고침시에도 값을 유지하기 위해서 redux-persist를 사용해 보았다.\n기존 redux + next.js  는 공식 문서에 가이드가 나와있어서 쉽게 할 수 있었다.\n하지만 redux-persist + ssr 구현은 공식문서에 나와있지 않아서 쉽지 않았지만 자료를 찾아보면서 결국 성공할 수 있어서 뿌듯하다.\n나와 같은 어려움을 겪는 사람이 있다면 위 방법으로 해결할 수 있기를 바란다.</p>\n<h2 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h2>\n<p><a href=\"https://redux.js.org/usage/nextjs\">redux + next.js 공식 문서</a></p>\n<p><a href=\"https://stackoverflow.com/questions/77783551/how-to-use-redux-persist-with-next-js-app-router\">stackoverflow</a></p>","frontmatter":{"title":"redux-persist + Next.js Hydrate 오류 해결법","date":"2024.11.12","tags":["redux-persist","redux","Next.js","SSR"],"thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#e8e8e8","images":{"fallback":{"src":"/static/89e6fda088535b4e97fd070fd73a4c73/ab163/redux.png","srcSet":"/static/89e6fda088535b4e97fd070fd73a4c73/813cd/redux.png 192w,\n/static/89e6fda088535b4e97fd070fd73a4c73/24c40/redux.png 384w,\n/static/89e6fda088535b4e97fd070fd73a4c73/ab163/redux.png 768w","sizes":"(min-width: 768px) 768px, 100vw"},"sources":[{"srcSet":"/static/89e6fda088535b4e97fd070fd73a4c73/23244/redux.webp 192w,\n/static/89e6fda088535b4e97fd070fd73a4c73/d4e33/redux.webp 384w,\n/static/89e6fda088535b4e97fd070fd73a4c73/88eeb/redux.webp 768w","type":"image/webp","sizes":"(min-width: 768px) 768px, 100vw"}]},"width":768,"height":400}}}}}]}},"pageContext":{"slug":"/redux-persist + Next.js Hydrate 오류 해결법/"}},"staticQueryHashes":["642825376"],"slicesMap":{}}