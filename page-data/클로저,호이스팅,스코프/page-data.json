{"componentChunkName":"component---src-templates-post-template-tsx","path":"/클로저,호이스팅,스코프/","result":{"data":{"allMarkdownRemark":{"nodes":[{"html":"<h1 id=\"스코프-scope\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EC%BD%94%ED%94%84-scope\" aria-label=\"스코프 scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스코프 (Scope)</h1>\n<p>스코프란 쉽게 설명하자면 변수의 <strong>접근범위</strong> 라고 할 수 있다.\n자바스크립트에는 <code class=\"language-text\">전역(global)</code> 과 <code class=\"language-text\">지역(local)</code> 두 가지의 스코프가 있다.\n지역 스코프는 해당 지역에서만 접근이 가능하고, 전역 스코프는 말 그대로 전역에서 접근이 가능하다.</p>\n<p>자바스크립트에서 함수를 생성하면 새로운 스코프를 생성하게 된다. 그러므로 함수 몸체에 선언한 변수는 함수 안에서만 사용할 수 있는데, 이걸 <code class=\"language-text\">함수 스코프(function-scoped)</code> 라고 한다.\n-> 함수 스코프는 지역 스코프의 대표적인 예</p>\n<p>쉬운 이해를 위해서 아래의 코드를 보자</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">exampleFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 지역(함수) 스코프</span>\n  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token string\">\"declared inside function\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// x는 오직 exampleFunction 내부에서만 사용 가능.</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"declared inside function\" 출력</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 에러 발생</span></code></pre></div>\n<p>이 코드에서 <code class=\"language-text\">x</code> 는 지역 스코프가 된다.\n함수 몸체에서 선언한 변수는 함수 안에서만 사용할 수 있기 때문에 <code class=\"language-text\">console.log(x)</code> 는 에러가 발생한다.</p>\n<p>다른 코드를 통해 다른 예제를 알아보자</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token string\">\"declared outside function\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 전역 스코프</span>\n\n<span class=\"token function\">exampleFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">exampleFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"declared outside function\" 출력</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"declared outside function\" 출력</span></code></pre></div>\n<p><code class=\"language-text\">x</code> 는 전역에 선언된 변수로 전역 스코프를 갖는다.\n그렇기 때문에 <code class=\"language-text\">exampleFunction</code> 에서도 접근이 가능하고, <code class=\"language-text\">console.log(x)</code> 에서도 접근이 가능하다.</p>\n<p>그렇다면 이런 경우에서는 어떻게 동작할까?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token string\">\"declared outside function\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 전역 스코프</span>\n\n<span class=\"token function\">exampleFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">exampleFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 지역(함수) 스코프</span>\n  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token string\">\"declared inside function\"</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"declared inside function\" 출력</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"declared outside function\" 출력</span></code></pre></div>\n<p>이 코드는 전역에 선언된 <code class=\"language-text\">x</code> 와 지역에 선언된 <code class=\"language-text\">x</code> 가 동시에 존재하는 경우이다.\n<code class=\"language-text\">exampleFunction</code> 에서는 <code class=\"language-text\">declared inside function</code> 을 출력하고 전역에서는 <code class=\"language-text\">declared inside function</code> 을 출력한다.</p>\n<p>이는 <code class=\"language-text\">Scope Chain</code> 때문에 일어나는 현상인데, 자신의 스코프 내에 변수가 없으면 <code class=\"language-text\">Scope Chain</code> 을 통해 상위 스코프에 존재하는 변수를 찾아나가기 때문에 일어나는 현상이다.</p>\n<p>또한 <code class=\"language-text\">블록 스코프(block scope)</code> 도 존재하는데, 자바스크립트 ES6부터 <code class=\"language-text\">let</code>, <code class=\"language-text\">const</code> 로 변수 선언이 가능해지면서 일반 블록에서도 스코프를 생성할 수 있게 되었다.</p>\n<h1 id=\"호이스팅hoisting\" style=\"position:relative;\"><a href=\"#%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85hoisting\" aria-label=\"호이스팅hoisting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>호이스팅(Hoisting)</h1>\n<blockquote>\n<h4 id=\"javascript-공식문서\" style=\"position:relative;\"><a href=\"#javascript-%EA%B3%B5%EC%8B%9D%EB%AC%B8%EC%84%9C\" aria-label=\"javascript 공식문서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Javascript 공식문서</h4>\n<p>호이스팅은 인터프리터가 코드를 실행하기 전에 함수, 변수, 클래스 또는 임포트\n(import)의 선언문을 해당 범위의 <strong>맨 위</strong>로 이동시키는 과정을 말합니다.</p>\n</blockquote>\n<p>자바스크립트 공식문서에는 호이스팅을 위와 같이 설명하고 있다.</p>\n<p>맨 위로 이동시킨다는 말이 와닿지 않을 수 있는데 쉽게 설명하자면 선언이 코드 실행 전에 메모리에 저장되었다는 말과 같다.</p>\n<p>호이스팅은 3단계에 걸쳐서 일어나는데 과정은 아래와 같다.</p>\n<h4 id=\"1-선언-단계-declaration-phase\" style=\"position:relative;\"><a href=\"#1-%EC%84%A0%EC%96%B8-%EB%8B%A8%EA%B3%84-declaration-phase\" aria-label=\"1 선언 단계 declaration phase permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 선언 단계 (Declaration phase)</h4>\n<h4 id=\"2-초기화-단계-initialization-phase\" style=\"position:relative;\"><a href=\"#2-%EC%B4%88%EA%B8%B0%ED%99%94-%EB%8B%A8%EA%B3%84-initialization-phase\" aria-label=\"2 초기화 단계 initialization phase permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 초기화 단계 (Initialization phase)</h4>\n<h4 id=\"3-할당-단계-assignment-phase\" style=\"position:relative;\"><a href=\"#3-%ED%95%A0%EB%8B%B9-%EB%8B%A8%EA%B3%84-assignment-phase\" aria-label=\"3 할당 단계 assignment phase permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 할당 단계 (Assignment phase)</h4>\n<p>자바스크립트에 <strong>모든 선언</strong>에는 호이스팅이 발생한다.\n하지만 <strong>let, const, class</strong> 에는 호이스팅이 발생하지 않는 것으로 보는데 , 그 이유는 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal_dead_zone_tdz\">temporal dead zone</a>이 선언 이전의 변수 사용을 엄격하게 금지하고 있기 때문이다.</p>\n<p>예를 들면 아래와 같다</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 참조 에러</span>\n  <span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>이 코드는 상위 범위에서 x를 읽을 수 있을것 같지만 실제로는 <code class=\"language-text\">const x = 2</code> 에서 값을 읽어오기 때문에 에러가 발생한다.</p>\n<blockquote>\n<h4 id=\"javascript-공식문서-1\" style=\"position:relative;\"><a href=\"#javascript-%EA%B3%B5%EC%8B%9D%EB%AC%B8%EC%84%9C-1\" aria-label=\"javascript 공식문서 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Javascript 공식문서</h4>\n<p>const 선언은 여전히 정의된 전체 범위를 \"오염\"시키기 때문에 <code class=\"language-text\">console.log(x)</code> 문은 아직   초기화되지 않은 <code class=\"language-text\">const x = 2</code> 선언에서 <code class=\"language-text\">x</code>를 대신 읽어서 ReferenceError를 던집니다.</p>\n</blockquote>\n<p>아래와 같은 경우는 호이스팅의 예제가 아니다</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></code></pre></div>\n<p>이 코드에는 \"선언 전 접근\" 이 없는데, 이는 단순히 <code class=\"language-text\">var</code> 이 블록으로 범위가 지정되지 않았기 때문이다.</p>\n<h1 id=\"클로저-closure\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%A1%9C%EC%A0%80-closure\" aria-label=\"클로저 closure permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클로저 (Closure)</h1>\n<blockquote>\n<h4 id=\"javascript-공식-문서\" style=\"position:relative;\"><a href=\"#javascript-%EA%B3%B5%EC%8B%9D-%EB%AC%B8%EC%84%9C\" aria-label=\"javascript 공식 문서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Javascript 공식 문서</h4>\n<p><strong>클로저</strong>는 주변 상태(어휘적 환경)에 대한 참조와 함께 묶인(포함된) 함수의 조합입니다. 즉, 클로저는 내부 함수에서 외부 함수의 범위에 대한 접근을 제공합니다. JavaScript에서 클로저는 함수 생성 시 함수가 생성될 때마다 생성됩니다.</p>\n</blockquote>\n<p>코드를 보면서 천천히 이해해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">makeFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Mozilla\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">displayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> displayName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> myFunc <span class=\"token operator\">=</span> <span class=\"token function\">makeFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Mozilla;</span></code></pre></div>\n<p>이 코드를 실행시키면 <code class=\"language-text\">Mozilla</code> 라는 이름이 출력된다.\n직관적으로 보자면 함수 안의 지역 변수들은 함수가 실행되는 동안에만 존재하는게 아닌가? 라고 생각할 수 있다.</p>\n<p>이와 같은 관점으로 보자면 <code class=\"language-text\">makeFunc()</code> 는 <code class=\"language-text\">myFunc()</code> 에 <code class=\"language-text\">displayName()</code> 을 할당해 주고 없어지기 때문에 <code class=\"language-text\">myFunc()</code> 를 호출하면 에러가 날 것으로 예상된다.</p>\n<p>하지만 결과는 에러 없이 정상적으로 동작하는걸 볼 수 있다.\n여기에서 <strong>클로저</strong> 라는 개념이 등장하는데, javascript에서는 클로저를 형성하기 때문에 <code class=\"language-text\">name</code>에 접근 할 수 있다.</p>\n<p>이처럼 자신을 포함하고 있는 외부함수보다 내부함수가 더 오래 유지될 경우 외부 함수 밖에서 내부 함수를 호출하더라도 외부 함수의 지역 변수에 접근할 수 있는데, 이를 <strong>클로저</strong> 라고 한다.</p>\n<h1 id=\"후기\" style=\"position:relative;\"><a href=\"#%ED%9B%84%EA%B8%B0\" aria-label=\"후기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>후기</h1>\n<p>프론트엔드 기술 면접을 준비하면서 스코프, 호이스팅, 클로저에 대한 개념을 공부해 보았다. 이 중에서도 클로저는 스코프, 호이스팅에 대한 개념을 알고 있어야지 이해가 쉽게 되기 때문에 나에게는 어려운 개념중 하나였다.</p>\n<p>기술 면접 질문에도 자주 출제되는 개념들인 만큼 자세히 알아보는 시간을 가질수 있어서 좋았다. 여러 블로그 글과 공식 문서를 참고하고 쓴 글이라서 혹시 잘못된 정보가 있으면 피드백을 해주면 좋을것 같다.</p>","frontmatter":{"title":"스코프, 호이스팅, 클로저에 대해 알아보자","date":"2023.09.07","tags":["면접","CS"],"thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#e8d848","images":{"fallback":{"src":"/static/bab07f5f53d0dafbf293cd6c2792b1ed/88eeb/js.webp","srcSet":"/static/bab07f5f53d0dafbf293cd6c2792b1ed/23244/js.webp 192w,\n/static/bab07f5f53d0dafbf293cd6c2792b1ed/d4e33/js.webp 384w,\n/static/bab07f5f53d0dafbf293cd6c2792b1ed/88eeb/js.webp 768w,\n/static/bab07f5f53d0dafbf293cd6c2792b1ed/f80f8/js.webp 1536w","sizes":"(min-width: 768px) 768px, 100vw"},"sources":[]},"width":768,"height":400}}}}}]}},"pageContext":{"slug":"/클로저,호이스팅,스코프/"}},"staticQueryHashes":["642825376"],"slicesMap":{}}