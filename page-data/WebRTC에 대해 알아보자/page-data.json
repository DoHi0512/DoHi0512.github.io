{"componentChunkName":"component---src-templates-post-template-tsx","path":"/WebRTC에 대해 알아보자/","result":{"data":{"allMarkdownRemark":{"nodes":[{"html":"<h2 id=\"1-webrtc-란\" style=\"position:relative;\"><a href=\"#1-webrtc-%EB%9E%80\" aria-label=\"1 webrtc 란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. WebRTC 란?</h2>\n<p>WebRTC 는 <strong>Web Real-Time Communication</strong> 의 약자로 실시간으로 영상 통화, 음성 채팅, P2P 파일 공유 등에 사용되는 라이브러리다.</p>\n<h3 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h3>\n<ul>\n<li><strong>real-time 에 흡사하는 낮은 Latency</strong></li>\n</ul>\n<p>예를 들어 다른 스트리밍 기술인 HLS는 애플에서 개발된 Low Latency 기술임에도 약 <strong>3s</strong>의 지연시간을 가지고 있다.\n하지만 WebRTC는 <strong>real-time</strong> 에 가까운 속도를 가지고 있다.\n<img src=\"https://velog.velcdn.com/images/dohi/post/93fc6711-d612-41ec-b420-54a939224d89/image.png\" alt=\"참고사진\"></p>\n<ul>\n<li><strong>별도의 소프트웨어/플러그인 설치 없이 사용할 수 있다</strong></li>\n</ul>\n<p>WebRTC는 기본 <strong>JS API</strong> 라서 개발하는데 진입장벽이 낮고, 사용자가 별도의 소프트웨어나 플러그인을 설치하지 않고도 사용할 수 있다.</p>\n<h3 id=\"단점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h3>\n<ul>\n<li><strong>UDP 로 동작</strong></li>\n</ul>\n<p>UDP로 동작하기 때문에 매우 빠른 속도를 낼 수 있지만 이로 인한 데이터 손실이 발생할 수 있다.</p>\n<ul>\n<li><strong>크로스 브라우징 이슈</strong></li>\n</ul>\n<p>WebRTC는 IOS, Android, FireFox와 같은 환경에서도 사용이 가능하지만 사람들이 잘 사용하지 않는 브라우저나 이전 버전에서는 동작하지 않을 수 있다.</p>\n<h2 id=\"2-작동-원리\" style=\"position:relative;\"><a href=\"#2-%EC%9E%91%EB%8F%99-%EC%9B%90%EB%A6%AC\" aria-label=\"2 작동 원리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 작동 원리</h2>\n<h3 id=\"용어\" style=\"position:relative;\"><a href=\"#%EC%9A%A9%EC%96%B4\" aria-label=\"용어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>용어</h3>\n<ul>\n<li>\n<p><strong>SDP(Session Description Protocol)</strong> : 코덱, 오디오 및 비디오 등과 같은 세션 연결에 대한 정보를 포함하는 프로토콜. 두 peer간에 SDP를 교환함으로 서로의 연결 방식을 알 수 있고. 이는 <strong>SDP Offer(제안)</strong> 과 <strong>SDP Answer(응답)</strong> 으로 나뉜다.</p>\n</li>\n<li>\n<p><strong>ICE(Interactive Connectivity Establishment)</strong> : 데이터를 수신할 수 있는 공용 IP 주소 및 포트, 사용자는 <strong>STUN</strong> 서버에 요청을 함으로써 여러개의 Ice 후보를 갖게 된다.</p>\n</li>\n<li>\n<p><strong>STUN(Session Traversal Uilities for NAT)</strong> : 각 peer 사이에 방화벽이 존재하거나, <strong>NAT</strong> 환경에 놓여 있는 경우에는 각 peer 간에 <strong>Signaling</strong>이 불가능하기 때문에 이를 서로 중개해주는 서버라고 생각하면 된다.</p>\n</li>\n</ul>\n<h3 id=\"과정\" style=\"position:relative;\"><a href=\"#%EA%B3%BC%EC%A0%95\" aria-label=\"과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>과정</h3>\n<p>정보가 전달되는 방식은 일반적으로 <strong>Signaling</strong> 이라는 프로세스로 동작한다.\n두 peer는 서로의 정보를 모르기 때문에 일반적으로 WebSocket이나 제 3자 Signaling 서비스 등을 사용하여 동일한 채널로 연결한다.</p>\n<p>동일한 채널에 있으면 SDP와 ICE 후보 교환을 통해 최적의 네트워크 경로를 찾은 뒤, 서로간의 통신이 이루어진다.</p>\n<p>자세한 과정을 알아보자.</p>\n<ol>\n<li>\n<p>두 peer는 일종의 Signaling 방법을 통해서 SDP를 교환한다. 하지만 아직 SDP 교환만 했을 뿐 통신은 불가능하다.</p>\n</li>\n<li>\n<p>두 peer간의 통신을 위해서는 데이터의 전송이 더 필요한데, 대부분의 장치가 NAT환경 또는 방화벽에 막혀 있기 때문에 ICE 라는 방법으로 데이터를 보낸다.</p>\n</li>\n<li>\n<p>백그라운드에서 SDP Offer가 교환되면 각 peer는 STUN서버에 ICE 후보들을 생성해달라고 요청한다.</p>\n</li>\n<li>\n<p>생성한 ICE 후보들을 peer간 교환한 후, 네트워크가 사용할 최적의 ICE 후보를 선택한다.</p>\n</li>\n<li>\n<p>ICE 후보가 교환되고 최적의 네트워크 경로가 탐색되면 두 peer간의 데이터 통신이 이루어진다.</p>\n</li>\n</ol>\n<p>이 과정에서는 한가지 문제가 있는데, ICE 후보를 모으는데 시간이 걸릴 수 있다.\n일반적으로 각 peer는 ICE 후보를 수집해서 한꺼번에 교환할 뿐만 아니라 한쪽 peer의 ICE 후보 수집이 완료되어야 다른 한쪽 peer의 ICE 후보 수집이 시작된다.</p>\n<p>이런 작업을 병렬적으로 수행할 수 있게 하는것이 <strong>Trickle ICE</strong>다.\nTrickle ICE는 ICE 후보를 찾는 즉시 peer간 교환한다. 이로 인해 상호 연결 가능한 ICE 후보를 더 빠르게 찾아낼 수 있다.</p>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>프로젝트에서 WebRTC를 사용할 일이 생겨서 공부하게 되었는데 알아야 할 용어도 많고 네트워크를 많이 안 하다 보니까 조금 어려웠던 것 같다.\n그래도 블로그에 정리하면서 이해도 더 잘 되었고 나중에 기억이 잘 안나는 부분이 있을 때 복습할 수 있을것 같다.</p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<p><a href=\"https://medium.com/agora-io/how-does-webrtc-work-996748603141\">How does WebRTC work</a></p>\n<p><a href=\"https://webrtc.org/?hl=ko\">WebRTC</a></p>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/API/WebRTC_API\">WebRTC API</a></p>","frontmatter":{"title":"WebRTC에 대해 알아보자","date":"2024.05.09","tags":["monorepo"],"thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/eb3519ef20dae9a7f8954f550cc8a6a5/1af93/webrtc.webp","srcSet":"/static/eb3519ef20dae9a7f8954f550cc8a6a5/993ed/webrtc.webp 177w,\n/static/eb3519ef20dae9a7f8954f550cc8a6a5/1adaf/webrtc.webp 353w,\n/static/eb3519ef20dae9a7f8954f550cc8a6a5/1af93/webrtc.webp 706w","sizes":"(min-width: 706px) 706px, 100vw"},"sources":[]},"width":768,"height":400.3172804532578}}}}}]}},"pageContext":{"slug":"/WebRTC에 대해 알아보자/"}},"staticQueryHashes":["642825376"],"slicesMap":{}}