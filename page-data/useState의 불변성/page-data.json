{"componentChunkName":"component---src-templates-post-template-tsx","path":"/useState의 불변성/","result":{"data":{"allMarkdownRemark":{"nodes":[{"html":"<h1 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h1>\n<p>React를 사용해서 개발하다 보면 <code class=\"language-text\">useState</code> 를 사용하는 상황이 많다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span>setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\nstate <span class=\"token operator\">=</span> state <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token comment\">// 리렌더링 되지 않음</span>\n\n<span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev</span> <span class=\"token operator\">=></span> prev <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 리렌더링</span>\n</code></pre></div>\n<p>위와 같은 코드를 보았을 때 <code class=\"language-text\">state</code> 의 상태를 직접 변경하면 리렌더링이 일어나지 않는다.\n하지만 <code class=\"language-text\">setState</code> 를 사용해서 <code class=\"language-text\">state</code> 를 변경했을때는 리렌더링이 일어난다.\n왜 이런 일이 일어나는지 지금부터 알아보자.</p>\n<h1 id=\"usestate의-불변성\" style=\"position:relative;\"><a href=\"#usestate%EC%9D%98-%EB%B6%88%EB%B3%80%EC%84%B1\" aria-label=\"usestate의 불변성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useState의 불변성</h1>\n<p>React의 state는 <strong>객체</strong> 형태이다. 객체는 참조형 자료 주소이기 때문에 state의 값을 직접 변경하면 참조하는 자료 주소는 바뀌지 않는다.</p>\n<p>React에서는 상태 변경의 기준을 <strong>참조 값의 변경</strong>이다. 이 때문에 state를 직접 변경한다면 React에서는 state가 변하지 않았다고 생각하고 리렌더링을 하지 않는다.</p>\n<p>또한 값을 직접 변경하게 된다면 비교할 값이 없어지므로 값이 변경됬다는걸 알지 못한다.</p>\n<p>다음은 간단한 useState의 코드이다</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">initialValue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> initialValue<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">state</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> value<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    value <span class=\"token operator\">=</span> newValue<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span>setState<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>실제로는 훨씬 복잡하게 구현되어 있지만, 설명을 위해서는 이 정도 코드도 충분하다.</p>\n<p>이 코드에서 <code class=\"language-text\">value</code> 라는 값을 <code class=\"language-text\">setState</code> 에서 핸들링 하고 있는데, 여기에서 <a href=\"https://dohi0512.github.io/%ED%81%B4%EB%A1%9C%EC%A0%80,%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85,%EC%8A%A4%EC%BD%94%ED%94%84/\">클로저</a>라는 개념이 나온다.</p>\n<p>클로저를 사용해서 <code class=\"language-text\">setState</code>에서 <code class=\"language-text\">state</code>에 접근할 수 있게 되고, 값을 변경할수 있게 된다.</p>\n<p>이처럼 <code class=\"language-text\">useState</code>의 <strong>불변성</strong> 때문에 우리는 <code class=\"language-text\">state</code> 의 값을 직접 변경하지 않는것이다.</p>\n<h1 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h1>\n<p>useState의 불변성에 대해 간단히 정리해봤는데 이전에 공부했던 개념인 클로저가 나와서 쉽게 이해할 수 있었다. 지금처럼 차근차근 공부하면서 개념을 쌓아 나가는 개발자가 되야겠다.</p>","frontmatter":{"title":"useState의 불변성이란 무엇일까?","date":"2023.09.08","tags":["면접","CS"],"thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#082838","images":{"fallback":{"src":"/static/d308f717b2ca846f9416e347c0288ea9/88eeb/useState.webp","srcSet":"/static/d308f717b2ca846f9416e347c0288ea9/23244/useState.webp 192w,\n/static/d308f717b2ca846f9416e347c0288ea9/d4e33/useState.webp 384w,\n/static/d308f717b2ca846f9416e347c0288ea9/88eeb/useState.webp 768w","sizes":"(min-width: 768px) 768px, 100vw"},"sources":[]},"width":768,"height":400}}}}}]}},"pageContext":{"slug":"/useState의 불변성/"}},"staticQueryHashes":["642825376"],"slicesMap":{}}