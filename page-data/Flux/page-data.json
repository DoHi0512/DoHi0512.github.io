{"componentChunkName":"component---src-templates-post-template-tsx","path":"/Flux/","result":{"data":{"allMarkdownRemark":{"nodes":[{"html":"<h1 id=\"flux-architecture-등장-배경\" style=\"position:relative;\"><a href=\"#flux-architecture-%EB%93%B1%EC%9E%A5-%EB%B0%B0%EA%B2%BD\" aria-label=\"flux architecture 등장 배경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Flux Architecture 등장 배경</h1>\n<p><code class=\"language-text\">Flux</code> 는 기존 <code class=\"language-text\">MVC</code> 패턴의 단점을 보완하고자 <strong>Facebook</strong> 에서 개발한 아키텍쳐이다.\n기존 <code class=\"language-text\">MVC</code> 패턴에 무슨 문제가 있길래 <code class=\"language-text\">Flux</code>를 개발했을까?</p>\n<p>기존 <code class=\"language-text\">MVC</code> 패턴을 알아보자</p>\n<p><img src=\"https://velog.velcdn.com/images/dohi/post/fb17fda3-d61c-4352-9914-c61b152d5b75/image.png\" alt=\"\"></p>\n<p><code class=\"language-text\">MVC</code>는 <code class=\"language-text\">Model-View-Controller</code>  의 약자이다. 소프트웨어의 <strong>비즈니스 로직</strong> 과 <strong>화면</strong> 을 구분하는데 중점을 두고 있는 디자인 패턴이다.</p>\n<p><code class=\"language-text\">MVC</code> 는 3가지 부분으로 구성되어 있다.</p>\n<ul>\n<li>Model : 데이터와 비즈니스 로직을 관리한다.</li>\n<li>View : 레이아웃과 화면을 처리한다.</li>\n<li>Controller : 모델과 뷰로 명령을 전달한다.</li>\n</ul>\n<p><code class=\"language-text\">MVC</code> 패턴에 무슨 문제가 있길래 <code class=\"language-text\">Flux</code>를  개발하였을까?</p>\n<p><img src=\"https://velog.velcdn.com/images/dohi/post/d637e292-aeaa-478c-bc48-ec5b5c03b104/image.png\" alt=\"\"></p>\n<p>이런 로직에서의 문제는 거대한 프로젝트에서는 너무 복잡해진다는 점이다.</p>\n<p>이런 문제점을 해결하기 위해 <strong>Flux</strong> 구조가 등장하였다.</p>\n<h1 id=\"flux-architecture란\" style=\"position:relative;\"><a href=\"#flux-architecture%EB%9E%80\" aria-label=\"flux architecture란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Flux Architecture란</h1>\n<p>Flux 는 Facebook에서 만든 디자인 패턴이다.</p>\n<h2 id=\"구조와-데이터-흐름\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EC%A1%B0%EC%99%80-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%9D%90%EB%A6%84\" aria-label=\"구조와 데이터 흐름 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구조와 데이터 흐름</h2>\n<p><img src=\"https://velog.velcdn.com/images/dohi/post/aca0853f-2d23-4076-93b7-9ac41588a7b7/image.png\" alt=\"\"></p>\n<p>Flux에서 데이터는 <strong>단방향</strong> 으로 흐른다.\n단방향 데이터 흐름은 Flux의 핵심이며, Flux 프로그래머를 위한 <strong>제일의 멘탈 모델</strong> 이 된다.</p>\n<p>데이터의 흐름은 <code class=\"language-text\">Dispatcher</code> -> <code class=\"language-text\">Store</code> ->  <code class=\"language-text\">View</code> 순서이며 <code class=\"language-text\">View</code> 에서 입력이 발생하면 <code class=\"language-text\">Action</code> 을 통해 <code class=\"language-text\">Dispatcher</code> 로 간다.</p>\n<p>그럼 지금부터 <code class=\"language-text\">Action</code> , <code class=\"language-text\">Dispatcher</code> , <code class=\"language-text\">Store</code> , <code class=\"language-text\">View</code> 에 대해서 자세하게 알아보자</p>\n<h3 id=\"1-dispatcher\" style=\"position:relative;\"><a href=\"#1-dispatcher\" aria-label=\"1 dispatcher permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Dispatcher</h3>\n<p>모든 데이터는 중앙 허브인 Dispatcher를 통해서 흐른다.\n본질적으로 Store의 콜백을 등록하는데 쓰이고 Action을 Store에 배분해주는 간단한 작동 방식을 가진다.</p>\n<h3 id=\"2-store\" style=\"position:relative;\"><a href=\"#2-store\" aria-label=\"2 store permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Store</h3>\n<p>Store는 애플리케이션의 상태를 저장하는 역할을 한다.\n모든 상태 변화는 Store를 통해 일어나며 Dispatcher 단계를 거쳐야지만 상태값 변경 요처이 가능하다.</p>\n<h3 id=\"3-action\" style=\"position:relative;\"><a href=\"#3-action\" aria-label=\"3 action permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Action</h3>\n<p>Dispatcher를 통해 Store에 상태 변화 요청을 보낼 수 있는데 이때 <strong>Dispatcher의 데이터 묶음</strong> 을 Action 이라고 한다.</p>\n<h3 id=\"4-view-or-controller-view\" style=\"position:relative;\"><a href=\"#4-view-or-controller-view\" aria-label=\"4 view or controller view permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. View or Controller-View</h3>\n<p>View는 Store에서 상태를 가져와서 사용자에게 보여주는 역할을 한다.\nController-View 는 Store와 View의 중간 관리자 같은 역할을 하는데 Store에서 일어난 상태 값의 변경을 자신 아래의 모든 View에게 전달해주는 역할을 한다.</p>\n<h1 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h1>\n<p>Flux 디자인패턴에 대해 공부해 보았다. MVC 구조는 알고 있었지만 Flux 구조는 처음 들어보는 거라 생소했다.\n공부하면서 Flux의 장점에 대해 알게 되었고, 실제로 프로젝트에도 적용해 보고 싶다는 생각을 했다.\nMVC와 Flux 말고도 다양한 디자인 패턴들이 있는데 나중에 시간이 나면 한번 공부해 봐야겠다.</p>","frontmatter":{"title":"Flux Architecture란?","date":"2023.09.11","tags":["면접","CS"],"thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#484848","images":{"fallback":{"src":"/static/1217e9be406678cf3eb9ca9a820c5351/88eeb/flux.webp","srcSet":"/static/1217e9be406678cf3eb9ca9a820c5351/23244/flux.webp 192w,\n/static/1217e9be406678cf3eb9ca9a820c5351/d4e33/flux.webp 384w,\n/static/1217e9be406678cf3eb9ca9a820c5351/88eeb/flux.webp 768w","sizes":"(min-width: 768px) 768px, 100vw"},"sources":[]},"width":768,"height":400}}}}}]}},"pageContext":{"slug":"/Flux/"}},"staticQueryHashes":["642825376"],"slicesMap":{}}