{"componentChunkName":"component---src-templates-post-template-tsx","path":"/Monorepo를 알아보자/","result":{"data":{"allMarkdownRemark":{"nodes":[{"html":"<h2 id=\"1-모노레포의-등장-배경\" style=\"position:relative;\"><a href=\"#1-%EB%AA%A8%EB%85%B8%EB%A0%88%ED%8F%AC%EC%9D%98-%EB%93%B1%EC%9E%A5-%EB%B0%B0%EA%B2%BD\" aria-label=\"1 모노레포의 등장 배경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 모노레포의 등장 배경</h2>\n<h3 id=\"기존-모놀로식-애플리케이션의-문제점\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EC%A1%B4-%EB%AA%A8%EB%86%80%EB%A1%9C%EC%8B%9D-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"기존 모놀로식 애플리케이션의 문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기존 모놀로식 애플리케이션의 문제점</h3>\n<p>모노레포는 기존 모놀리식 애플리케이션의 한계를 극복하기 위해 등장했다.</p>\n<blockquote>\n<p>모놀리식 애플리케이션이란 모듈화 없이 설계된 애플리케이션을 말한다</p>\n</blockquote>\n<p>모놀리식 방식으로 서비스를 개발한다면 코드가 서로 직접적으로 의존하며 <strong>관심 분리</strong>가 제대로 이루어지지 않는다.</p>\n<p>또한 설계, 리팩토링, 배포와 같은 작업을 매번 거대한 단위로 처리하므로 많은 제약과 어려움이 생긴다.</p>\n<p>이러한 한계점은 <strong>모듈화</strong> 를 통해 해결할 수 있다.\n모듈식 프로그래밍을 통해 일부 로직을 재사용 할 수 있도록 하고 서비스의 일부분만 수정하는 것으로 모놀로식 구조의 한계점을 일부 극복할 수 있다.</p>\n<h3 id=\"멀티레포\" style=\"position:relative;\"><a href=\"#%EB%A9%80%ED%8B%B0%EB%A0%88%ED%8F%AC\" aria-label=\"멀티레포 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>멀티레포</h3>\n<p>모듈의 관리를 용이하게 하기 위해서 독자적인 저장소를 만드는 구조를\n<strong>멀티레포</strong> 구조라고 한다.</p>\n<p>각 저장소는 독립적인 프로젝트가 되며 독립적인 개발, 테스트, 배포 등이 이루어진\n다.</p>\n<p>멀티레포 방식은 현재 서비스를 개발하는 표준적인 방식이다. 업계는 <strong>팀의 자율성</strong> 때문에 이러한 방식을 선호한다.</p>\n<p>멀티레포 방식에는 문제가 없을 것 같지만 장점인 <strong>자율성</strong> 이 단점으로 작용한다.\n자율성은 <strong>독립적인 구조</strong>에 의해 제공되며 이러한 독립성은 팀원들간의 <strong>협업</strong>을 방해한다.</p>\n<h3 id=\"모노레포의-등장\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%85%B8%EB%A0%88%ED%8F%AC%EC%9D%98-%EB%93%B1%EC%9E%A5\" aria-label=\"모노레포의 등장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모노레포의 등장</h3>\n<p>위와 같은 멀티레포 방식의 단점인 <strong>독립적인 구조</strong>를 해결하기 위해 등장한 방식이다.</p>\n<p>멀티레포 방식과 유사하지만 독자적인 프로젝트를 같은 저장소에 넣는 것으로 독립성 문제를 해결한다.</p>\n<p>단순히 같은 저장소에 여러개의 프로젝트를 넣는다고 모노레포 구조가 아닌 서로간의 <strong>의존성</strong> 이 존재하는 구조를 모노레포 구조라고 부른다.</p>\n<p>쉽게 말해서 서로 <strong>연관이 있는</strong> 프로젝트를 같은 저장소에 저장하는 방식이다.</p>\n<h2 id=\"꼭-모노레포를-써야-하나\" style=\"position:relative;\"><a href=\"#%EA%BC%AD-%EB%AA%A8%EB%85%B8%EB%A0%88%ED%8F%AC%EB%A5%BC-%EC%8D%A8%EC%95%BC-%ED%95%98%EB%82%98\" aria-label=\"꼭 모노레포를 써야 하나 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>꼭 모노레포를 써야 하나?</h2>\n<p>멀티레포와 모노레포간의 장단점이 교차하기 때문에 상황에 맞는 적절한 구조를 선택하는것이 중요하다.</p>\n<p>모노레포가 적절한 상황은 다음과 같다.</p>\n<ul>\n<li>유사한 제품의 집합</li>\n<li>여러 프로젝트의 변화를 한눈에 파악해야 할 때</li>\n<li>호스트 애플리케이션을 플러그인 등으로 확장할 때</li>\n<li>공통 기능을 재사용하는 관련된 프로젝트의 집합</li>\n<li>유사한 DevOps로 구성된 프로젝트의 집합</li>\n</ul>\n<h2 id=\"모노레포-구축을-위한-도구\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%85%B8%EB%A0%88%ED%8F%AC-%EA%B5%AC%EC%B6%95%EC%9D%84-%EC%9C%84%ED%95%9C-%EB%8F%84%EA%B5%AC\" aria-label=\"모노레포 구축을 위한 도구 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모노레포 구축을 위한 도구</h2>\n<p>[2022.stateofjs] (<a href=\"https://2022.stateofjs.com/en-US/libraries/monorepo-tools/\">https://2022.stateofjs.com/en-US/libraries/monorepo-tools/</a>) 에서 확인한 사용률은 아래와 같다.\n<img src=\"https://velog.velcdn.com/images/dohi/post/9fb80680-940b-4863-9322-4a1a259197a2/image.png\" alt=\"\"></p>\n<p>Yarn, npm, Lerna, pnpm 등이 많이 사용되고 있다.</p>","frontmatter":{"title":"Monorepo를 알아보자","date":"2024.06.06","tags":["monorepo"],"thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#282828","images":{"fallback":{"src":"/static/88716685f6dd6af5b004758794ba4d30/88eeb/monorepo.webp","srcSet":"/static/88716685f6dd6af5b004758794ba4d30/23244/monorepo.webp 192w,\n/static/88716685f6dd6af5b004758794ba4d30/d4e33/monorepo.webp 384w,\n/static/88716685f6dd6af5b004758794ba4d30/88eeb/monorepo.webp 768w","sizes":"(min-width: 768px) 768px, 100vw"},"sources":[]},"width":768,"height":400}}}}}]}},"pageContext":{"slug":"/Monorepo를 알아보자/"}},"staticQueryHashes":["642825376"],"slicesMap":{}}