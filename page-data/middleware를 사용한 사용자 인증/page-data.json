{"componentChunkName":"component---src-templates-post-template-tsx","path":"/middleware를 사용한 사용자 인증/","result":{"data":{"allMarkdownRemark":{"nodes":[{"html":"<h2 id=\"middlware란\" style=\"position:relative;\"><a href=\"#middlware%EB%9E%80\" aria-label=\"middlware란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Middlware란?</h2>\n<p>Nextjs 공식에서는 이렇게 설명하고 있다.</p>\n<blockquote>\n<p>Middleware allows you to run code before a request is completed. Then, based on the incoming request, you can modify the response by rewriting, redirecting, modifying the request or response headers, or responding directly.</p>\n</blockquote>\n<p>쉽게 말해서 <strong>요청이 들어오기 전에(페이지가 렌더링되기 전에)</strong> 코드를 실행하는 것이다.\nNext.js 12.2 부터 stable 되었으며 아래와 같은 상황에서 사용 가능하다.</p>\n<ul>\n<li><strong>인증 및 권한 부여</strong>: 특정 페이지의 사용자 권한 확인.</li>\n<li><strong>서버 측 리디렉션(redirection)</strong>: 특정 조건에 따라 서버에서의 사용자 리디렉션.</li>\n<li><strong>경로 재설정</strong>: A/B 테스트, 레거시 경로 등 동적으로 경로 재설정.</li>\n<li><strong>봇 감지</strong>: 봇 트래픽 감지 및 차단.</li>\n</ul>\n<p>이 밖에도 여러가지 상황이 있지만 오늘은 <strong>인증 및 권한 부여</strong>를 해보자.</p>\n<h2 id=\"사용방법\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%EB%B0%A9%EB%B2%95\" aria-label=\"사용방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용방법</h2>\n<p>먼저 middlware.ts 파일을 만든다.</p>\n<ul>\n<li>app router: src 폴더 밑에 생성.</li>\n<li>pages router: pages 폴더와 같은 경로에 생성.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// middleware.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NextResponse <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'next/server'</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> NextRequest <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'next/server'</span>\n \n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span>request<span class=\"token operator\">:</span> NextRequest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> NextResponse<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">URL</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'/home'</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  matcher<span class=\"token operator\">:</span> <span class=\"token string\">'/about/:path*'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하나씩 살펴보자</p>\n<h3 id=\"함수\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98\" aria-label=\"함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span>request<span class=\"token operator\">:</span> NextRequest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> NextResponse<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">URL</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'/home'</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p><code class=\"language-text\">middleware</code> 라는 함수명으로 export한다 (함수명은 반드시 <strong>middlware</strong>여야 한다.)</p>\n</li>\n<li>\n<p>파라미터로 <code class=\"language-text\">NextRequest</code> 객체를 받고 있다.</p>\n</li>\n</ul>\n<p><code class=\"language-text\">NextRequest</code> 로 쿠키를 설정하거나 다양한 작업을 할 수 있다.\n<a href=\"https://nextjs.org/docs/app/api-reference/functions/next-request\">NextRequest</a></p>\n<ul>\n<li><code class=\"language-text\">NextResponse</code> redirect 함수를 호출하고 return 한다.</li>\n</ul>\n<p><code class=\"language-text\">NextResponse</code> 객체로 페이지 redirect, 쿠키 설정, json 등 다양한 작업을 할 수 있다.\n<a href=\"https://nextjs.org/docs/app/api-reference/functions/next-response\">NextResponse</a></p>\n<h3 id=\"matcher\" style=\"position:relative;\"><a href=\"#matcher\" aria-label=\"matcher permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>matcher</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  matcher<span class=\"token operator\">:</span> <span class=\"token string\">'/about/:path*'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>middleware가 실행될 경로를 설정해주는 객체다. (객체명은 반드시 <strong>config</strong>여야 한다.)\n위 코드는 <code class=\"language-text\">/about</code> 뒤에 오는 모든 경로를 포함한다.</p>\n<p>배열을 사용해 matcher를 여러개 설정할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  matcher<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'/about/:path*'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/dashboard/:path*'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드는 <code class=\"language-text\">/about</code>, <code class=\"language-text\">dashboard</code> 뒤에 오는 모든 경로를 포함한다.</p>\n<p>이 밖에도 정규식 등 다양한 설정을 할 수 있다.</p>\n<h2 id=\"사용자-인증\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%9D%B8%EC%A6%9D\" aria-label=\"사용자 인증 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용자 인증</h2>\n<h3 id=\"기존-방식\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EC%A1%B4-%EB%B0%A9%EC%8B%9D\" aria-label=\"기존 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기존 방식</h3>\n<p>middleware를 알아봤으니 이제 사용자 인증을 해보자.\n처음에는 <code class=\"language-text\">cookies-next</code> 라이브러리로 쿠키를 저장하고, middleware를 통해 검증하는 로직을 사용했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> setCookie <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"cookies-next\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useLoginMutation</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> mutate <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    mutationFn<span class=\"token operator\">:</span> login<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">onSuccess</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> accessToken<span class=\"token punctuation\">,</span> refreshToken <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> res<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setCookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accessToken\"</span><span class=\"token punctuation\">,</span> accessToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setCookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"refreshToken\"</span><span class=\"token punctuation\">,</span> refreshToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">invalidateQueries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> queryKey<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      toast<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"로그인 성공!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>로그인 성공시 refreshToken과 accessToken을 받아서 <code class=\"language-text\">cookies-next</code> 라이브러리를 사용해 쿠키에 저장하는 코드다.</p>\n<p>middleware 코드를 한번 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// middleware.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NextRequest<span class=\"token punctuation\">,</span> NextResponse <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"next/server\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span>req<span class=\"token operator\">:</span> NextRequest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>req<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accessToken\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> NextResponse<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">URL</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> NextResponse<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  matcher<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"/review/:path*\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/category/:path*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드는 <code class=\"language-text\">/review</code>, <code class=\"language-text\">/category</code> 를 포함하는 모든 경로에서 로그인이 되어있지 않다면(accessToken이 없다면) 로그인 페이지로 redirect 하는 코드다.</p>\n<p>보기에는 잘 작동할것 같지만, <code class=\"language-text\">cookies-next</code> 라이브러리가 비동기적으로 동작해서 브라우저에는 쿠키 값이 나오지만, middleware는 쿠키 값을 인식하지 못하고 새로고침을 해야지 인식하는 문제가 있었다.</p>\n<p>Next.js 의 특성상 cookie는 <code class=\"language-text\">Server Action</code> 또는 <code class=\"language-text\">Route Hanlder</code> 에서만 가능했기에 클라이언트에서는 쿠키를 설정할 방법이 없었다. (<code class=\"language-text\">Server Component</code> 에서도 불가능.)</p>\n<p>그래서 로그인 로직을 middleware로 옮기고, 서버에서 로그인과 인증을 모두 처리하는 방법을 시도해 보았다.</p>\n<h3 id=\"새로운-방식\" style=\"position:relative;\"><a href=\"#%EC%83%88%EB%A1%9C%EC%9A%B4-%EB%B0%A9%EC%8B%9D\" aria-label=\"새로운 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>새로운 방식</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NextRequest<span class=\"token punctuation\">,</span> NextResponse <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"next/server\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> server <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./api/instance/instance\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span>req<span class=\"token operator\">:</span> NextRequest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>nextUrl<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/oauth\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> code <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>nextUrl<span class=\"token punctuation\">.</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"code\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> provider <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>nextUrl<span class=\"token punctuation\">.</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"provider\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> NextResponse<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">URL</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> server\n      <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">auth/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>provider<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/token</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        authorizationCode<span class=\"token operator\">:</span> code<span class=\"token punctuation\">,</span>\n        redirectUri<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> refreshToken<span class=\"token punctuation\">,</span> accessToken <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n\n        res<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accessToken\"</span><span class=\"token punctuation\">,</span> accessToken<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n          maxAge<span class=\"token operator\">:</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//일주일</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        res<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"refreshToken\"</span><span class=\"token punctuation\">,</span> refreshToken<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n          maxAge<span class=\"token operator\">:</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//한달,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>req<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accessToken\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> NextResponse<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">URL</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> NextResponse<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  matcher<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"/review/:path*\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/category/:path*\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/oauth\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>기존의 클라이언트에서의 login 로직을 제거하고, middleware에서 로그인을 하도록 변경했다.</p>\n<ol>\n<li><code class=\"language-text\">req</code> 파라미터로 현재 경로를 찾고, 만약 <code class=\"language-text\">/oauth</code>(로그인) 경로라면 로그인을 시도한다.</li>\n<li>로그인이 성공하면 <code class=\"language-text\">NextResponse</code> 객체에 <code class=\"language-text\">cookie</code> 를 저장해 return한다.</li>\n<li><code class=\"language-text\">/oauth</code> 경로가 아니라면 사용자 인증 후 페이지를 로드한다.</li>\n</ol>\n<p><strong>server</strong> 에서 <strong>response</strong>에 직접 쿠키를 설정하는 방법으로 새로고침 없이 middleware에서도 정상적으로 쿠키를 읽고, 사용자 인증 처리를 할 수 있었다.</p>\n<h2 id=\"후기\" style=\"position:relative;\"><a href=\"#%ED%9B%84%EA%B8%B0\" aria-label=\"후기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>후기</h2>\n<p>Nextjs에서의 SSR 방식이다 보니까 cookie를 다루는게 쉽지 않다. 라이브러리를 사용해 보았지만 근본적인 해결 방법은 될 수 없었고 Nextjs 공식 문서를 찾아보면서 해결 할 수 있었다.\nroute handler로 구현하는것도 생각해 보았지만 별 차이가 없을것 같아서 middleware를 선택했다. middleware를 사용하여 해결하긴 했지만 더 좋은 방법이 없을까 고민하게 된다.\n만약 더 좋은 방법을 찾으면 글을 업데이트 하겠다.</p>\n<h2 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h2>\n<p><a href=\"https://nextjs.org/docs/app/building-your-application/routing/middleware\">Middleware</a></p>","frontmatter":{"title":"Middleware를 사용한 사용자 인증","date":"2024.10.28","tags":["middleware","Next.js"],"thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/static/5b907210f2ea4edc1c079644bc702349/ab163/middleware.png","srcSet":"/static/5b907210f2ea4edc1c079644bc702349/813cd/middleware.png 192w,\n/static/5b907210f2ea4edc1c079644bc702349/24c40/middleware.png 384w,\n/static/5b907210f2ea4edc1c079644bc702349/ab163/middleware.png 768w,\n/static/5b907210f2ea4edc1c079644bc702349/d302d/middleware.png 1536w","sizes":"(min-width: 768px) 768px, 100vw"},"sources":[{"srcSet":"/static/5b907210f2ea4edc1c079644bc702349/23244/middleware.webp 192w,\n/static/5b907210f2ea4edc1c079644bc702349/d4e33/middleware.webp 384w,\n/static/5b907210f2ea4edc1c079644bc702349/88eeb/middleware.webp 768w,\n/static/5b907210f2ea4edc1c079644bc702349/f80f8/middleware.webp 1536w","type":"image/webp","sizes":"(min-width: 768px) 768px, 100vw"}]},"width":768,"height":400}}}}}]}},"pageContext":{"slug":"/middleware를 사용한 사용자 인증/"}},"staticQueryHashes":["642825376"],"slicesMap":{}}