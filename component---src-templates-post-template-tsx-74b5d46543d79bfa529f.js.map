{"version":3,"file":"component---src-templates-post-template-tsx-74b5d46543d79bfa529f.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/hooks/useIntersactionObserver.tsx","webpack://gatsby-starter-blog/./src/components/Post/TOC.tsx","webpack://gatsby-starter-blog/./src/utils/getHeading.ts","webpack://gatsby-starter-blog/./src/components/Post/PostContent.tsx","webpack://gatsby-starter-blog/./src/components/Post/PostHeader.tsx","webpack://gatsby-starter-blog/./src/components/Post/Comments.tsx","webpack://gatsby-starter-blog/./src/templates/PostTemplate.tsx"],"sourcesContent":["import { useCallback } from \"react\"\n\nconst IODefaultOptions = {\n  root: null,\n  rootMargin: \"-50% 0px -50% 0px\",\n  threshold: 0,\n}\n\ntype DoWhenIntersectFunction = (\n  entries: IntersectionObserverEntry[],\n  observer: any\n) => void\n\nlet observer: IntersectionObserver\n\nexport const useIntersectionObserver = () => {\n  const addIntersectHandler = useCallback(\n    (\n      targets: any[],\n      options = IODefaultOptions,\n      doWhenIntersect: DoWhenIntersectFunction\n    ) => {\n      observer = new IntersectionObserver(doWhenIntersect, options)\n      targets.forEach(el => {\n        observer.observe(el)\n      })\n    },\n    []\n  )\n\n  const removeIntersectHandler = useCallback(() => {\n    observer.disconnect()\n  }, [])\n\n  return {\n    addIntersectHandler,\n    removeIntersectHandler,\n  }\n}\n","import React from \"react\"\nimport { IHeadings } from \"src/types/PostItem.type\"\nconst TOC = ({ headings }: { headings: IHeadings[] }) => {\n  return (\n    <div className=\"sticky top-20 h-full whitespace-nowrap w-1/4 pl-10 lg:flex hidden sidebar\">\n      <div className=\"border-l-[.5px] border-Grayscale/30 flex flex-col\">\n        {headings.map(({ id, level, text, focus }, idx) => (\n          <a\n            href={\"#\" + id}\n            className={`${\"level-\" + level} ${\n              focus ? \"focus\" : \"\"\n            } hover:text-text-color whitespace-normal pr-6`}\n            key={idx}\n          >\n            {text}\n          </a>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default TOC\n","const getHeading = (activeId: string) => {\n  const headingElements = document.querySelectorAll(\"h1, h2, h3\")\n  const headings = Array.from(headingElements).map(headingElement => ({\n    id: headingElement.getAttribute(\"id\") || \"\",\n    text: headingElement.textContent || \"\",\n    level: Number(headingElement.tagName.charAt(1)),\n    focus: headingElement.getAttribute(\"id\") === activeId,\n  }))\n\n  return headings\n}\n\nexport default getHeading\n","import React, { useEffect, useMemo, useState } from \"react\"\nimport { useIntersectionObserver } from \"../../hooks/useIntersactionObserver\"\nimport TOC from \"./TOC\"\nimport { IHeadings } from \"src/types/PostItem.type\"\nimport getHeading from \"../../utils/getHeading\"\nconst PostContent = ({ html }: { html: string }) => {\n  const [headings, setHeadings] = React.useState<IHeadings[]>([])\n  const [activeId, setActiveId] = useState(\"\")\n  useEffect(() => {\n    const newHeadings = getHeading(activeId)\n    setHeadings(newHeadings)\n  }, [activeId])\n\n  const { addIntersectHandler, removeIntersectHandler } =\n    useIntersectionObserver()\n\n  useEffect(() => {\n    const targetElements = headings\n      .map(info => document.getElementById(info.id))\n      .filter(el => el !== null)\n    addIntersectHandler(\n      targetElements,\n      {\n        root: null,\n        rootMargin: \"0px 0px -95% 0px\",\n        threshold: 0,\n      },\n      entries => {\n        entries.forEach((entry: any) => {\n          if (entry.isIntersecting && entry.target?.id) {\n            setActiveId(entry.target?.id)\n          }\n        })\n      },\n    )\n    return () => {\n      removeIntersectHandler()\n    }\n  }, [addIntersectHandler, removeIntersectHandler, headings])\n  return (\n    <div className=\"w-full h-full pt-40 pb-20 relative flex flex-row lg:justify-end justify-center\">\n      <div\n        className=\"lg:w-1/2 w-4/5 markdown\"\n        dangerouslySetInnerHTML={{ __html: html }}\n      />\n      <TOC headings={headings} />\n    </div>\n  )\n}\n\nexport default PostContent\n","import { GatsbyImage } from \"gatsby-plugin-image\"\nimport React from \"react\"\nimport { IPostFrontmatter } from \"src/types/PostItem.type\"\n\nconst PostHeader = ({\n  title,\n  thumbnail: {\n    childImageSharp: { gatsbyImageData },\n  },\n  date,\n  tags,\n}: IPostFrontmatter) => {\n  return (\n    <div className=\"h-[30rem] mt-16 w-full relative flex justify-center items-center bg-black\">\n      <GatsbyImage\n        image={gatsbyImageData}\n        className=\"w-full h-full bg-white object-cover absolute opacity-40\"\n        alt=\"img\"\n      />\n      <div className=\"absolute flex flex-col items-center\">\n        <span className=\"lg:text-4xl text-3xl text-center text-white font-bold\">\n          {title}\n        </span>\n        <span className=\"text-sm text-white mt-2\">{date}</span>\n        <span className=\"text-sm text-white mt-2\">{tags?.join(\"/\")}</span>\n      </div>\n    </div>\n  )\n}\nexport default PostHeader\n","import React, { createRef, useLayoutEffect } from \"react\"\nconst src = \"https://utteranc.es/client.js\"\nexport interface IUtterancesProps {\n  repo: string\n  theme: string\n}\nconst Comments: React.FC<IUtterancesProps> = React.memo(({ repo, theme }) => {\n  const containerRef = createRef<HTMLDivElement>()\n  useLayoutEffect(() => {\n    const utterances = document.createElement(\"script\")\n    const attributes = {\n      src,\n      repo,\n      theme,\n      \"issue-term\": \"pathname\",\n      label: \"âœ¨ðŸ’¬ comments âœ¨\",\n      crossOrigin: \"anonymous\",\n      async: \"true\",\n    }\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value)\n    })\n\n    containerRef.current!.appendChild(utterances)\n  }, [repo])\n\n  return <div className=\"w-full\" ref={containerRef} />\n})\n\nComments.displayName = \"Utterances\"\n\nexport default Comments\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { IPostItem } from \"src/types/PostItem.type\"\nimport PostContent from \"../components/Post/PostContent\"\nimport PostHeader from \"../components/Post/PostHeader\"\nimport Comments from \"../components/Post/Comments\"\nimport { useRecoilValue } from \"recoil\"\nimport { themeState } from \"../state/Theme\"\nimport Layout from \"../components/Shared/Layout\"\nimport Seo from \"../components/Shared/seo\"\ninterface IPostTemplateProps {\n  data: {\n    allMarkdownRemark: {\n      nodes: IPostItem[]\n    }\n  }\n}\nconst PostTemplate = ({\n  data: {\n    allMarkdownRemark: { nodes },\n  },\n}: IPostTemplateProps) => {\n  const { html, frontmatter } = nodes[0]\n  const theme = useRecoilValue(themeState)\n  return (\n    <>\n      <Seo title={frontmatter.title} description={frontmatter.description} />\n      <Layout width=\"w-full\" itemCenter=\"items-center\">\n        <PostHeader {...frontmatter} />\n        <PostContent html={html} />\n        <Comments\n          repo=\"DoHi0512/DoHi0512.github.io\"\n          theme={`github-${theme}`}\n        />\n      </Layout>\n    </>\n  )\n}\n\nexport default PostTemplate\n\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      nodes {\n        html\n        frontmatter {\n          title\n          date(formatString: \"YYYY.MM.DD\")\n          tags\n          thumbnail {\n            childImageSharp {\n              gatsbyImageData(width: 768, height: 400)\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["IODefaultOptions","root","rootMargin","threshold","observer","_ref","headings","React","className","map","_ref2","idx","id","level","text","focus","href","key","activeId","headingElements","document","querySelectorAll","Array","from","headingElement","getAttribute","textContent","Number","tagName","charAt","html","setHeadings","setActiveId","useState","useEffect","newHeadings","getHeading","addIntersectHandler","removeIntersectHandler","useCallback","targets","options","doWhenIntersect","IntersectionObserver","forEach","el","observe","disconnect","targetElements","info","getElementById","filter","entries","entry","_entry$target","_entry$target2","isIntersecting","target","dangerouslySetInnerHTML","__html","TOC","title","thumbnail","childImageSharp","gatsbyImageData","date","tags","GatsbyImage","image","alt","join","Comments","repo","theme","containerRef","createRef","useLayoutEffect","utterances","createElement","attributes","src","label","crossOrigin","async","Object","value","setAttribute","current","appendChild","ref","displayName","data","allMarkdownRemark","nodes","frontmatter","useRecoilValue","themeState","Seo","description","Layout","width","itemCenter","PostHeader","PostContent"],"sourceRoot":""}