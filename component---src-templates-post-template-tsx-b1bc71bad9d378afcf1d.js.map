{"version":3,"file":"component---src-templates-post-template-tsx-b1bc71bad9d378afcf1d.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/hooks/useIntersactionObserver.tsx","webpack://gatsby-starter-blog/./src/components/Post/TOC.tsx","webpack://gatsby-starter-blog/./src/components/Post/PostContent.tsx","webpack://gatsby-starter-blog/./src/components/Post/PostLayout.tsx","webpack://gatsby-starter-blog/./src/components/Post/PostHeader.tsx","webpack://gatsby-starter-blog/./src/components/Post/Comments.tsx","webpack://gatsby-starter-blog/./src/templates/PostTemplate.tsx"],"sourcesContent":["import { useCallback } from \"react\"\n\nconst IODefaultOptions = {\n  root: null,\n  rootMargin: \"-50% 0px -50% 0px\",\n  threshold: 0,\n}\n\ntype DoWhenIntersectFunction = (\n  entries: IntersectionObserverEntry[],\n  observer: any\n) => void\n\nlet observer: IntersectionObserver\n\nexport const useIntersectionObserver = () => {\n  const addIntersectHandler = useCallback(\n    (\n      targets: any[],\n      options = IODefaultOptions,\n      doWhenIntersect: DoWhenIntersectFunction\n    ) => {\n      observer = new IntersectionObserver(doWhenIntersect, options)\n      targets.forEach(el => {\n        observer.observe(el)\n      })\n    },\n    []\n  )\n\n  const removeIntersectHandler = useCallback(() => {\n    observer.disconnect()\n  }, [])\n\n  return {\n    addIntersectHandler,\n    removeIntersectHandler,\n  }\n}\n","import { IHeadings } from \"src/types/Post.type\"\nimport React from \"react\"\nconst TOC = ({ headings }: { headings: IHeadings[] }) => {\n  return (\n    <div className=\"sticky top-20 h-full whitespace-nowrap w-1/4 pl-10 lg:flex hidden sidebar\">\n      <div className=\"border-l-[.5px] border-Grayscale/30 flex flex-col\">\n        {headings.map(({ id, level, text, focus }) => (\n          <a\n            href={\"#\" + id}\n            className={`${\"level-\" + level} ${\n              focus ? \"focus\" : \"\"\n            } hover:text-text-color`}\n          >\n            {text}\n          </a>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default TOC\n","import React, { useEffect, useState } from \"react\"\nimport { useIntersectionObserver } from \"../hooks/useIntersactionObserver\"\nimport { IHeadings } from \"src/types/Post.type\"\nimport TOC from \"./TOC\"\nconst PostContent = ({ html }: { html: string }) => {\n  const [headings, setHeadings] = React.useState<IHeadings[]>([])\n  const [activeId, setActiveId] = useState(\"\")\n  useEffect(() => {\n    const headingElements = document.querySelectorAll(\"h1, h2, h3\")\n    const headings = Array.from(headingElements).map(headingElement => ({\n      id: headingElement.getAttribute(\"id\") || \"\",\n      text: headingElement.textContent || \"\",\n      level: Number(headingElement.tagName.charAt(1)),\n      focus: headingElement.getAttribute(\"id\") === activeId,\n    }))\n    setHeadings(headings)\n  }, [activeId])\n\n  const { addIntersectHandler, removeIntersectHandler } =\n    useIntersectionObserver()\n\n  useEffect(() => {\n    const targetElements = headings\n      .map(info => document.getElementById(info.id)) // Use info.id instead of info.text\n      .filter(el => el !== null) // Filter out null values\n    addIntersectHandler(\n      targetElements,\n      {\n        root: null,\n        rootMargin: \"0px 0px -95% 0px\",\n        threshold: 0,\n      },\n      (entries: any, observer: any) => {\n        entries.forEach((entry: any) => {\n          if (entry.isIntersecting && entry.target?.id) {\n            setActiveId(entry.target?.id)\n          }\n        })\n      }\n    )\n    return () => {\n      removeIntersectHandler()\n    }\n  }, [addIntersectHandler, removeIntersectHandler, headings])\n  return (\n    <div className=\"w-full h-full pt-40 pb-20 relative flex flex-row lg:justify-end justify-center\">\n      <div\n        className=\"lg:w-1/2 w-4/5 markdown\"\n        dangerouslySetInnerHTML={{ __html: html }}\n      />\n      <TOC headings={headings} />\n    </div>\n  )\n}\n\nexport default PostContent\n","import React from \"react\"\nimport Header from \"../Shared/Header\"\nimport Seo from \"../seo\"\nconst PostLayout = ({ children }: any) => {\n  return (\n    <>\n      <Seo title=\"Post\" description=\"Post Description\" />\n      <div className=\"w-full duration-300 flex flex-col items-center bg-bg-color\">\n        <Header width=\"4/5\" />\n        {children}\n      </div>\n    </>\n  )\n}\n\nexport default PostLayout\n","import { GatsbyImage } from \"gatsby-plugin-image\"\nimport React from \"react\"\nimport { IPostFrontmatter } from \"src/types/PostItem.type\"\n\nconst PostHeader = ({ title, thumbnail, date, tags }: IPostFrontmatter) => {\n  return (\n    <div className=\"h-[30rem] w-full relative flex justify-center items-center bg-black\">\n      <GatsbyImage\n        image={thumbnail.childImageSharp.gatsbyImageData}\n        className=\"w-full h-full object-cover absolute opacity-40\"\n        alt=\"img\"\n      />\n      <div className=\"absolute flex flex-col items-center\">\n        <span className=\"lg:text-4xl text-3xl text-white font-bold\">\n          {title}\n        </span>\n        <span className=\"text-sm text-white mt-2\">{date}</span>\n        <span className=\"text-sm text-white mt-2\">{tags.join(\"/\")}</span>\n      </div>\n    </div>\n  )\n}\nexport default PostHeader\n","import React, { createRef, useLayoutEffect } from \"react\"\n\nconst src = \"https://utteranc.es/client.js\"\n\nexport interface IUtterancesProps {\n  repo: string\n  theme: string\n}\n\nconst Comments: React.FC<IUtterancesProps> = React.memo(({ repo, theme }) => {\n  const containerRef = createRef<HTMLDivElement>()\n  useLayoutEffect(() => {\n    const utterances = document.createElement(\"script\")\n\n    const attributes = {\n      src,\n      repo,\n      theme,\n      \"issue-term\": \"pathname\",\n      label: \"âœ¨ðŸ’¬ comments âœ¨\",\n      crossOrigin: \"anonymous\",\n      async: \"true\",\n    }\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value)\n    })\n\n    containerRef.current!.appendChild(utterances)\n  }, [repo])\n\n  return <div className=\"w-full\" ref={containerRef} />\n})\n\nComments.displayName = \"Utterances\"\n\nexport default Comments\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { IPostItem } from \"src/types/PostItem.type\"\nimport PostContent from \"../components/Post/PostContent\"\n\nimport PostLayout from \"../components/Post/PostLayout\"\nimport PostHeader from \"../components/Post/PostHeader\"\nimport Comments from \"../components/Post/Comments\"\nimport { useRecoilValue } from \"recoil\"\nimport { themeState } from \"../state/Theme\"\n\ninterface IPostTemplateProps {\n  data: {\n    allMarkdownRemark: {\n      edges: IPostItem[]\n    }\n  }\n}\nconst PostTemplate = ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n}: IPostTemplateProps) => {\n  const {\n    node: { html, frontmatter, tableOfContents },\n  } = edges[0]\n  const theme = useRecoilValue(themeState)\n  return (\n    <>\n      <PostLayout>\n        <PostHeader {...frontmatter} />\n        <PostContent html={html} />\n        <Comments\n          repo=\"DoHi0512/DoHi0512.github.io\"\n          theme={`github-${theme}`}\n        />\n      </PostLayout>\n    </>\n  )\n}\n\nexport default PostTemplate\n\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      edges {\n        node {\n          html\n          frontmatter {\n            title\n            date(formatString: \"YYYY.MM.DD\")\n            tags\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData(width: 768, height: 400)\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["IODefaultOptions","root","rootMargin","threshold","observer","_ref","headings","React","className","map","_ref2","id","level","text","focus","href","html","setHeadings","activeId","setActiveId","useState","useEffect","headingElements","document","querySelectorAll","Array","from","headingElement","getAttribute","textContent","Number","tagName","charAt","addIntersectHandler","removeIntersectHandler","useCallback","targets","options","doWhenIntersect","IntersectionObserver","forEach","el","observe","disconnect","targetElements","info","getElementById","filter","entries","entry","_entry$target","_entry$target2","isIntersecting","target","dangerouslySetInnerHTML","__html","TOC","children","Seo","title","description","Header","width","thumbnail","date","tags","GatsbyImage","image","childImageSharp","gatsbyImageData","alt","join","Comments","repo","theme","containerRef","createRef","useLayoutEffect","utterances","createElement","attributes","src","label","crossOrigin","async","Object","key","value","setAttribute","current","appendChild","ref","displayName","data","allMarkdownRemark","edges","node","frontmatter","tableOfContents","useRecoilValue","themeState","PostLayout","PostHeader","PostContent"],"sourceRoot":""}